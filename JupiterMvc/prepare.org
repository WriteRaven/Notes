 JupiterMvc -- 手写javawebmvc框架

* 整体项目参考
  1. 开发步骤
     https://www.jianshu.com/p/af9cb85adaba
   
  2. 框架模式
     https://developer.aliyun.com/article/641122

  3. 小demo
     https://www.cnblogs.com/czpblog/p/3790729.html



* 前言

     
** TODO 问题
   1. 操作系统用户态/核心态
   2. 进程通信  and  设备之间通讯


** 应用层数据网络io过程--介绍

     1. 从socket接收data
     2. 获取http请求。
        方案 - java。http.* / netty
     3. 封装request
     4. 启动servlet容器
     5. 封装servlet
     6. dispatcherServlet确定
     7. 数据分发
     8. 数据处理
     9. 封装response
     10. 从socket发送消息

 
** 基于servlet的javaweb mvc 主要框架--市场分析


*** servlet 规范实现
   * sevlet

     1. servlet教程
	https://blog.csdn.net/yanmiao0715/article/details/79949911

     2. sevlet 教程及源码分析
       https://blog.csdn.net/qq_19782019/article/details/80292110
       
     3. servlet 同Springmvc，tomcat关系
       https://www.jianshu.com/p/406a09136a18
       配合2一起使用，甚佳。

     4. Java web 中各种context关系
	https://www.jianshu.com/p/2537e2fec546

       
   * tomcat 和servlet 请求过程
     https://my.oschina.net/luozhou?tab=newest&catalogId=6589519x

    
   * servlet规范--javaee 规范
     - java ee 8
       https://www.oracle.com/cn/java/technologies/java-ee-glance.html
     
     - servlet 规范 v3.1
       https://jcp.org/aboutJava/communityprocess/final/jsr340/index.html
       https://download.oracle.com/otn-pub/jcp/servlet-3_1-fr-eval-spec/servlet-3_1-final.pdf?AuthParam=1603289454_e886d032cd7d807c3e0080b354983c10
   
*** 基于servlet规范实现容器分析web container -- tomcat
    * tomcat 架构
      todo
   
    * tomcat实现原理
      todo

    * 功能
      todo - 验证
      * tomcat从socket到封装servlet过程
	https://my.oschina.net/luozhou?tab=newest&catalogId=6589519x
      
    * 优劣
      - io
        基于nio， 容易出bug， 
        不如netty快
	

*** 基于servlet实现的框架 -- springmvc
    
    * 官网
      https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html

    * 步骤
      https://blog.csdn.net/qq_38449518/article/details/81545578
      https://blog.csdn.net/K_fly_k/article/details/89300919

    * 与servlet关系
      https://www.jianshu.com/p/406a09136a18

    * 核心原理
      1. ioc
	 面向接口编程
	 - 原理

	 - 与java spi比较
	 
      2. aop
	 oop的补充
	 
	 = 原理
	 
	 - 比较
	 

** 其他技术
   struct
   todo 求验证

   * web容器 -  web container
     1. tomcat-embed   -- 已经介绍

	核心部件 - connector & container
	   
        https://www.cnblogs.com/mahuan2/p/6733566.html
	   
        设计模式
	https://developer.ibm.com/zh/articles/j-lo-tomcat2/
	
     2. jetty
	https://developer.ibm.com/zh/articles/j-lo-jetty/
	
     3. undertow
	- 官网 
          https://undertow.io
	- 入门 
          https://blog.csdn.net/fayeyiwang/article/details/54729550


** 基础技术分析
 
*** IO通讯
	
     1. 字符字节编码问题
	https://developer.ibm.com/zh/articles/j-lo-chinesecoding/
	Java 中字节流与字符流的区别? - 胖君的回答 - 知乎
        https://www.zhihu.com/question/39262026/answer/127103286
        
	1. asm
	   简易教程
	   https://www.jianshu.com/p/bc4b0632fbd8 解释了Spring和asm关系
	   https://blog.csdn.net/wodeyuer125/article/details/44618679
	   https://zhuanlan.zhihu.com/p/94498015?utm_source=wechat_timeline
	   https://www.cnblogs.com/liuling/archive/2013/05/25/asm.html -- 涉及cglib实现aop
	   系列教程
	   https://blog.csdn.net/ryo1060732496/article/details/103655505

     2. 流的概念
	流是什么？？？
	https://www.zhihu.com/question/27996269
	也可以从流处理和批处理的角度来分析。

	流与buffer区别
	https://www.myway5.com/index.php/2017/04/30/stream-vs-buffer/

	1. 使用java。http
	   todo
     3. nio
	- java nio 基础
       	  http://ifeve.com/java-nio-all/

	- nio vs bio
	   
	  1. buffered-oriented and stream-oriented
	     don't know
	   	
	- nio
	  https://mp.weixin.qq.com/s/GfV9w2B0mbT7PmeBS45xLw?spm=a2c6h.12873639.0.0.53064a61CCvXAf

     4. netty

	- 入门简介
	  https://developer.aliyun.com/article/769587
	  https://juejin.im/post/6844903703183360008

	建议配合字节字符区别，io通讯一起食用。

	- zero-copy
	  https://juejin.im/post/6844903815913668615
	  需要跟操作系统/计算机组成一起食用

 
*** 设计理念	     
      1. 事件驱动编程
	 https://www.jianshu.com/p/d4e591465ef3
	 
	 从设计模式的角度来说-即为观察者模式
	 https://www.iteye.com/blog/jinnianshilongnian-1902886

** 框架介绍

*** 框架目标
    简介之类blabla
    简单，轻量，易拓展


