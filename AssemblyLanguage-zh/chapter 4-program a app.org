* 第四章 编写一个程序

** 基本概念
   - 程序
     源程序中最终由计算机执行，处理的指令或数据

   - 汇编源程序
     由 伪指令（编译器处理） 和 汇编指令（变为机器码）组成
     
     - 伪指令
       没有对应的机器码的指令，最终不被CPU所执行。
       由编译器来执行，编译器根据伪指令来进行进行相关的编译工作。

     - 汇编指令
       可被编译成机器指令，并最终被CPU执行的指令
     
     - 定义一个段
       - 定义指令
         *segment* 和 *end*
         被编译器编译的汇编程序时，必须用到的伪指令

       - 指令格式
         =标号 segment=
         =段名 ends=

       - 段的作用
         一个汇编程序由一个或多个段组成
         这些段可以用来存放代码，数据或当作栈空间

     - 编译程序结束
       =end= 指令

     - 关联段寄存器与段
       - 指令
         assume

     - 标号
       一个标号指代了一个地址
       标号放在segment前面，作为一个段名称，最终经编译链接处理为一个段的段地址

     - demo
       #+BEGIN_SRC 
       assume cs:codesg

       codesg segment
     
       start: mov ax,0123H
              mov bx,0456H
              add ax,bx
              add ax,ax

              mov ax,4c00h
              int 21h
 
       codesg ends
       end
       #+END_SRC
       
   - 汇编程序返回
     一个程序结束后，将CPU控制权交还给使它得以运行的程序的过程。
     例如：
       DOS是单任务操作系统，任务A开始时，CPU控制权从B转交给A;
       B开始运行，A暂停运行(挂起)；
       B运行完后，将CPU控制权交还给A过程
       
     - 对应程序段 
       #+BEGIN_SRC 
       mov ax,4c00h
       int 21h
       #+END_SRC
       int - 中断标志


** 编译链接
   - 编译
     将源文件编译成相关的机器码(并非全部)

   - 连接
     程序很大时，可以将它分为多个源程序文件编译，每个源程序编译成目标文件后，
     再将其连接到一起，生成一个可执行文件
     
     程序调用某库文件的子程序时，需要将这个库文件和该程序生成的目标文件连接到一起，生成一个可执行文件
     
     一个源程序编译后，生成包含机械码的目标文件，目标文件中有些内容不能直接生成可执行文件，
     连接程序将此内容处理为最终的可执行信息


** 运行源程序
   - 运行流程
     | 流程 | 工具          | 生成                                 |
     |------+---------------+--------------------------------------|
     | 编写 | Emacs等编辑器 | 源程序                               |
     | 编译 | MASM.EXE      | 目标文件                             |
     | 连接 | LINK.EXE      | 可执行文件（包含描述文件及程序和数据 |
     | 调试 |               |                                      |
     | 执行 |               |                                      |

   - 编译环境
     WIN10 + DOSBox + MASM

   - 运行方法
     1. 将源文件存放于MAXM的目录下, 假设MAXM安装在 /d:\MAXM/
     2. 打开DOSBox.exe
     3. =mount c d:\MAXM=
        此时，BOSDox 就会把 /d:\MAXM/ 作为虚拟DOS系统中的C盘
     4. 在 /d:\MAXM/ 目录下编写汇编源文件 hello-world.asm
     5. 输入 =masm hello-world.asm= 进行编译
     6. 输入 =link hello-world.obj= 进行连接
     7. 输入 =debug helllo-world.exe= 调试程序



** 可执行文件中程序装入内存并运行的原理
   - 原理
     在DOS中，可执行文件中的程序P1若要运行，必须有一个正在运行的程序P2,
     P2将P1从可执行文件中加载到内存，并将CPU的控制权交给P1，P1才得以运行，
     此时P2被挂起；
   
     当P1运行完毕后，P1将CPU的控制权返还给使它得以运行的程序P2 - 即程序返回
   
   - 操作系统简介
     操作系统由多个功能模块组成。任何通用的操作系统，都要提供一个称为shell的程序，
     用户使用这个程序来操作计算机系统工作。
   
     DOS中有个command.com程序就是DOS系统中的shell。

   - 在DOS中直接执行 /1.exe/时的流程
     在DOS中直接执行 /1.exe/ 时，由正在运行的command将 /1.exe/ 中的程序加载到内存中的。
     
     command设置CPU的CS：IP指向程序的第一条指令（即入口），从而使程序得以运行

     程序运行结束后，返回到command中，CPU继续运行command

     - 流程图
       [[./src/4-program a app-assembly app execute process.png]]

   - 程序加载过程
     程序加载后，ds中存放着程序所在内存区的段地址，这个内存去的偏移地址为0，则程序所在的内存区
     的地址为 /ds:0/ 
     
     这个内存区的前256个字节中存放的时 /PSP/-DOS用来和程序进行通信

     从256字节处向后的空间存放的是程序

     所以，从ds中可得PSP的段地址SA, PSP的偏移地址为0，则物理地址为 =SA*16+0=
     因为PSP占267(100H)字节，所以程序的物理地址为：
       =SA*16 + 0 + 256 = SA*16 + 16*16 = (SA+16)*16+0=
     用段地址和偏移地址表示为： =SA + 10：0=

     - 流程图
       [[./src/4-program a app-exe file loading process.png]]


** 程序执行过程的跟踪 - Debug
   
   - Debug功能
     Debug可以将程序加载如内存，设置SP：IP指向程序的入口，但Debug并不放弃对CPU的控制，
     因此，可以使用Debug相关命令来单步执行程序，查看每条指令的执行结果
